
<script>
{
  let map, marker, geocoder, places;

  window.initMap = function() {
    const initialPosition = { lat: 35.681236, lng: 139.767125 }; // 東京駅

    const mapEl = document.getElementById("map");
    const placeInput = document.getElementById("place-input");
    const suggestEl  = document.getElementById("place-suggest");

    const addressInput   = document.getElementById("address-input");       
    const storeNameInput = document.getElementById("store_name_input");    
    const latInput       = document.getElementById("latitude");            
    const lngInput       = document.getElementById("longitude");           

    if (!mapEl) return;

    map = new google.maps.Map(mapEl, { center: initialPosition, zoom: 15 });
    const pinIcon = {
  url: "<%= asset_path('beer-pin.png') %>",
  scaledSize: new google.maps.Size(36, 36),
  anchor: new google.maps.Point(18, 36)
};

marker = new google.maps.Marker({
  position: initialPosition,
  map,
  draggable: true,
  icon: pinIcon
});

    geocoder = new google.maps.Geocoder();
    places   = new google.maps.places.PlacesService(map);

   
    const autocompleteService = new google.maps.places.AutocompleteService();

    function fetchSuggestions(query) {
      if (!query) { hideSuggest(); return; }
      autocompleteService.getPlacePredictions(
        {
          input: query,
          types: ["establishment"],               
          componentRestrictions: { country: "jp"} 
        },
        renderSuggestions
      );
    }

    function renderSuggestions(predictions, status) {
      if (status !== google.maps.places.PlacesServiceStatus.OK || !predictions?.length) {
        hideSuggest();
        return;
      }
      suggestEl.innerHTML = "";
      predictions.forEach((p, idx) => {
        const li = document.createElement("li");
        li.className = "list-group-item list-group-item-action";
        li.textContent = p.description;      // 住所＋店名の文字列（見た目）
        li.dataset.placeId = p.place_id;
        li.tabIndex = 0;
        li.addEventListener("click", () => selectPlaceId(p.place_id));
        li.addEventListener("keydown", (e) => { if (e.key === "Enter") selectPlaceId(p.place_id); });
        suggestEl.appendChild(li);
      });
      suggestEl.style.display = "block";
    }

    function hideSuggest() {
      suggestEl.style.display = "none";
      suggestEl.innerHTML = "";
    }

    function selectPlaceId(placeId) {
      places.getDetails(
        {
          placeId,
          fields: ["name", "formatted_address", "geometry"]
        },
        (place, status) => {
          if (status !== google.maps.places.PlacesServiceStatus.OK || !place?.geometry) return;
          const loc = place.geometry.location;

          // 地図＆マーカー更新
          map.setCenter(loc);
          map.setZoom(17);
          marker.setPosition(loc);

          // フォームに自動反映
          if (storeNameInput) storeNameInput.value = place.name || "";
          if (addressInput)   addressInput.value   = place.formatted_address || "";
          if (latInput)       latInput.value       = loc.lat();
          if (lngInput)       lngInput.value       = loc.lng();

          // 入力窓にも店名を反映して候補閉じる
          if (placeInput) placeInput.value = place.name || place.formatted_address || placeInput.value;
          hideSuggest();
        }
      );
    }

    
    if (placeInput) {
      placeInput.addEventListener("input", () => fetchSuggestions(placeInput.value.trim()));

      
      placeInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && suggestEl.style.display !== "none") {
          e.preventDefault();
          const first = suggestEl.querySelector("li");
          if (first?.dataset.placeId) selectPlaceId(first.dataset.placeId);
        }
      });
    }

   
    document.addEventListener("click", (e) => {
      if (!suggestEl.contains(e.target) && e.target !== placeInput) hideSuggest();
    });

    // マーカー移動 → 住所補完
    marker.addEventListener("dragend", () => {
      const position = marker.getPosition();
      setLatLng(position);
      reverseGeocode(position);
    });

    // 地図クリック → マーカー移動 & 住所補完
    map.addEventListener("click", (event) => {
      const latLng = event.latLng;
      marker.setPosition(latLng);
      setLatLng(latLng);
      reverseGeocode(latLng);
    });

    function setLatLng(latLng) {
      if (latInput) latInput.value = typeof latLng.lat === "function" ? latLng.lat() : latLng.lat;
      if (lngInput) lngInput.value = typeof latLng.lng === "function" ? latLng.lng() : latLng.lng;
    }

    function reverseGeocode(latLng) {
      if (!addressInput) return;
      geocoder.geocode({ location: latLng }, (results, status) => {
        if (status === "OK" && results?.[0]) {
          addressInput.value = results[0].formatted_address;
        }
      });
    }

    // 初期値反映
    setLatLng(initialPosition);
    reverseGeocode(initialPosition);
  };
}
</script>


<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAdoX6sO5IySRH2kDanbCpAygqKxScAWa0&libraries=places&callback=initMap">
</script>